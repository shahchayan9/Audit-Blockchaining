syntax = "proto3";

package blockchain;

option go_package = "github.com/sameersah/auditchain/proto_gen/block_chain";
option java_package = "com.codecatalyst.auditchain.proto.blockchain";
option java_outer_classname = "BlockChainProto";

import "common.proto";

message WhisperResponse {
  string status = 1;         // "success", "failure"
  string error_message = 2;
}

message Block {
  int64 id = 1;                           // block id
  string hash = 2;                        // hash of current block
  string previous_hash = 3;               // hash of previous block
  repeated common.FileAudit audits = 4;   // audits in mempool
  string merkle_root = 5;
}

message BlockVoteResponse {
  bool vote = 1;             // true/false: whether your server votes for the proposed block
  string status = 2;         // "success", "failure"
  string error_message = 3;
}

message BlockCommitResponse {
  string status = 2;         // "success", "failure"
  string error_message = 3;
}

message GetBlockRequest {
  int64 id = 1;
} 

message GetBlockResponse {
  Block block = 1;
  string status = 2;
  string error_message = 3;  
}

message HeartbeatRequest {
  string from_address = 1;
  string current_leader_address = 2;
  int64 latest_block_id = 3;
  int64 mem_pool_size = 4;
}

message HeartbeatResponse {
  string status = 1;   // "success", "failure"  
  string error_message = 2;  
}

message TriggerElectionRequest {
  int64 term = 1;
  string address = 2;
}

message TriggerElectionResponse {
  bool vote = 1;
  int64 term = 2;
  string status = 3;
  string error_message = 4;
}

message NotifyLeadershipRequest {
  string address = 1;
}

message NotifyLeadershipResponse {
  string status = 1;
  string error_message = 2;
}

service BlockChainService {
  rpc WhisperAuditRequest (common.FileAudit) returns (WhisperResponse);
  rpc ProposeBlock (Block) returns (BlockVoteResponse);
  rpc CommitBlock (Block) returns (BlockCommitResponse);
  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
  rpc SendHeartbeat (HeartbeatRequest) returns (HeartbeatResponse);
  rpc TriggerElection (TriggerElectionRequest) returns (TriggerElectionResponse);
  rpc NotifyLeadership (NotifyLeadershipRequest) returns (NotifyLeadershipResponse);
}